package com.example.gerenciadorviagem.features.itnerary

import RequiredTextField
import android.os.Build
import android.widget.Toast
import androidx.annotation.RequiresApi
import androidx.compose.foundation.layout.Arrangement
import androidx.compose.foundation.layout.Column
import androidx.compose.foundation.layout.Row
import androidx.compose.foundation.layout.Spacer
import androidx.compose.foundation.layout.fillMaxSize
import androidx.compose.foundation.layout.padding
import androidx.compose.foundation.layout.width
import androidx.compose.foundation.rememberScrollState
import androidx.compose.foundation.verticalScroll
import androidx.compose.material3.Button
import androidx.compose.material3.ButtonDefaults
import androidx.compose.material3.ExperimentalMaterial3Api
import androidx.compose.material3.Scaffold
import androidx.compose.material3.Text
import androidx.compose.material3.TopAppBar
import androidx.compose.runtime.Composable
import androidx.compose.runtime.getValue
import androidx.compose.runtime.mutableStateOf
import androidx.compose.runtime.remember
import androidx.compose.runtime.rememberCoroutineScope
import androidx.compose.runtime.setValue
import androidx.compose.ui.Modifier
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.platform.LocalContext
import androidx.compose.ui.unit.dp
import com.restaurant.travel_counselor.services.ai.GeminiTripSuggestionService
import com.restaurant.travel_counselor.services.ai.dto.TripSuggestionRequest
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.launch
import kotlinx.coroutines.withContext

import androidx.compose.runtime.LaunchedEffect
import com.example.gerenciadorviagem.database.AppDatabase
import com.example.gerenciadorviagem.shared.Routes

@RequiresApi(Build.VERSION_CODES.O)
@OptIn(ExperimentalMaterial3Api::class)
@Composable
fun ItinerarySuggestionScreen(
    tripId: Int,
    onNavigateTo: (String) -> Unit
) {
    val context = LocalContext.current
    val tripDao = AppDatabase.getDatabase(context).tripDao()
    val coroutineScope = rememberCoroutineScope()

    var observations by remember { mutableStateOf("") }
    var itinerary by remember { mutableStateOf("") }
    var isGenerated by remember { mutableStateOf(false) }
    var isLoading by remember { mutableStateOf(false) }

    LaunchedEffect(tripId) {
        val trip = tripDao.findById(tripId)
        trip?.let {
            observations = it.notes ?: ""
            itinerary = it.itinerary ?: ""
            isGenerated = itinerary.isNotBlank()
        }
    }

    Scaffold(
        topBar = {
            TopAppBar(title = { Text("Itinerary Suggestion") })
        }
    ) { padding ->

        Column(
            modifier = Modifier
                .padding(padding)
                .padding(16.dp)
                .fillMaxSize()
                .verticalScroll(rememberScrollState()),
            verticalArrangement = Arrangement.spacedBy(16.dp)
        ) {
            Text("Write any relevant notes or preferences:")

            RequiredTextField(
                label = "Observations",
                value = observations,
                onValueChange = { observations = it }
            )

            Button(
                onClick = {
                    isLoading = true
                    coroutineScope.launch {
                        try {
                            val trip = tripDao.findById(tripId)
                            if (trip != null) {
                                val request = TripSuggestionRequest(
                                    destination = trip.destination,
                                    startDate = trip.startDate.toString(),
                                    endDate = trip.endDate.toString(),
                                    budget = trip.budget,
                                    type = trip.tripType.name,
                                    notes = observations
                                )
                                val result = GeminiTripSuggestionService(context).generateSuggestion(request)
                                itinerary = result.itinerary
                                isGenerated = true
                            } else {
                                Toast.makeText(context, "Trip Not Found", Toast.LENGTH_LONG).show()
                            }
                        } catch (e: Exception) {
                            Toast.makeText(context, "Error: ${e.message}", Toast.LENGTH_LONG).show()
                        } finally {
                            isLoading = false
                        }
                    }
                },
                enabled = !isLoading
            ) {
                Text(if (isLoading) "Generating..." else "Generate Itinerary")
            }

            if (isGenerated) {
                Text(itinerary)
            }

            Row {
                Button(
                    onClick = { onNavigateTo(Routes.TELA_PRINCIPAL) },
                    colors = ButtonDefaults.buttonColors(
                        containerColor = Color.LightGray,
                        contentColor = Color.DarkGray
                    )
                ) {
                    Text("Cancel")
                }

                Spacer(modifier = Modifier.width(16.dp))

                Button(
                    enabled = isGenerated,
                    onClick = {
                        CoroutineScope(Dispatchers.IO).launch {
                            val trip = tripDao.findById(tripId)
                            if (trip != null) {
                                val updatedTrip = trip.copy(itinerary = itinerary, notes = observations)
                                tripDao.updateTrip(updatedTrip)
                                withContext(Dispatchers.Main) {
                                    Toast.makeText(context, "Itinerary saved!", Toast.LENGTH_SHORT).show()
                                    onNavigateTo(Routes.TELA_PRINCIPAL)
                                }
                            }
                        }
                    }
                ) {
                    Text("Save")
                }
            }
        }
    }
}
