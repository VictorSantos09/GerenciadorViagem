package com.example.gerenciadorviagem.features.itnerary

import RequiredTextField
import android.os.Build
import android.widget.Toast
import androidx.annotation.RequiresApi
import androidx.compose.foundation.background
import androidx.compose.foundation.layout.*
import androidx.compose.foundation.rememberScrollState
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.foundation.verticalScroll
import androidx.compose.material3.*
import androidx.compose.material3.ButtonDefaults.elevatedButtonColors
import androidx.compose.runtime.*
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.draw.shadow
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.platform.LocalContext
import androidx.compose.ui.text.style.TextAlign
import androidx.compose.ui.unit.dp
import com.restaurant.travel_counselor.services.ai.GeminiTripSuggestionService
import com.restaurant.travel_counselor.services.ai.dto.TripSuggestionRequest
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.launch
import kotlinx.coroutines.withContext
import com.example.gerenciadorviagem.database.AppDatabase
import com.example.gerenciadorviagem.shared.Routes

@RequiresApi(Build.VERSION_CODES.O)
@OptIn(ExperimentalMaterial3Api::class)
@Composable
fun ItinerarySuggestionScreen(
    tripId: Int,
    onNavigateTo: (String) -> Unit
) {
    val context = LocalContext.current
    val tripDao = AppDatabase.getDatabase(context).tripDao()
    val coroutineScope = rememberCoroutineScope()

    var observations by remember { mutableStateOf("") }
    var itinerary by remember { mutableStateOf("") }
    var isGenerated by remember { mutableStateOf(false) }
    var isLoading by remember { mutableStateOf(false) }

    LaunchedEffect(tripId) {
        val trip = tripDao.findById(tripId)
        trip?.let {
            observations = it.notes ?: ""
            itinerary = it.itinerary ?: ""
            isGenerated = itinerary.isNotBlank()
        }
    }

    Scaffold(
        topBar = {
            CenterAlignedTopAppBar(
                title = {
                    Text(
                        "Sugestão de Roteiro",
                        style = MaterialTheme.typography.headlineSmall
                    )
                },
                colors = TopAppBarDefaults.centerAlignedTopAppBarColors(
                    containerColor = MaterialTheme.colorScheme.primaryContainer,
                    titleContentColor = MaterialTheme.colorScheme.onPrimaryContainer
                )
            )
        },
        containerColor = MaterialTheme.colorScheme.background
    ) { paddingValues ->

        Column(
            modifier = Modifier
                .padding(paddingValues)
                .padding(horizontal = 20.dp, vertical = 24.dp)
                .fillMaxSize()
                .verticalScroll(rememberScrollState()),
            verticalArrangement = Arrangement.spacedBy(24.dp)
        ) {
            Text(
                "Escreva quaisquer observações ou preferências relevantes:",
                style = MaterialTheme.typography.bodyMedium,
                color = MaterialTheme.colorScheme.onBackground
            )

            Card(
                shape = RoundedCornerShape(12.dp),
                modifier = Modifier.fillMaxWidth(),
                colors = CardDefaults.cardColors(containerColor = MaterialTheme.colorScheme.surfaceVariant),
                elevation = CardDefaults.cardElevation(defaultElevation = 8.dp)
            ) {
                RequiredTextField(
                    label = "Observações",
                    value = observations,
                    onValueChange = { observations = it },
                )
            }

            ElevatedButton(
                onClick = {
                    isLoading = true
                    coroutineScope.launch {
                        try {
                            val trip = tripDao.findById(tripId)
                            if (trip != null) {
                                val request = TripSuggestionRequest(
                                    destination = trip.destination,
                                    startDate = trip.startDate.toString(),
                                    endDate = trip.endDate.toString(),
                                    budget = trip.budget,
                                    type = trip.tripType.name,
                                    notes = observations
                                )
                                val result = GeminiTripSuggestionService(context).generateSuggestion(request)
                                itinerary = result.itinerary
                                isGenerated = true
                            } else {
                                Toast.makeText(context, "Viagem não encontrada", Toast.LENGTH_LONG).show()
                            }
                        } catch (e: Exception) {
                            Toast.makeText(context, "Erro: ${e.message}", Toast.LENGTH_LONG).show()
                        } finally {
                            isLoading = false
                        }
                    }
                },
                enabled = !isLoading,
                modifier = Modifier.fillMaxWidth(),
                shape = RoundedCornerShape(12.dp),
                colors = elevatedButtonColors()
            ) {
                if (isLoading) {
                    CircularProgressIndicator(
                        color = MaterialTheme.colorScheme.onPrimary,
                        modifier = Modifier
                            .size(24.dp)
                            .padding(end = 8.dp),
                        strokeWidth = 2.dp
                    )
                }
                Text(text = if (isLoading) "Gerando..." else "Gerar Roteiro")
            }

            if (isGenerated) {
                Card(
                    shape = RoundedCornerShape(12.dp),
                    modifier = Modifier.fillMaxWidth(),
                    colors = CardDefaults.cardColors(containerColor = MaterialTheme.colorScheme.surface),
                    elevation = CardDefaults.cardElevation(defaultElevation = 6.dp)
                ) {
                    Text(
                        text = itinerary,
                        style = MaterialTheme.typography.bodyLarge,
                        modifier = Modifier
                            .padding(16.dp),
                        color = MaterialTheme.colorScheme.onSurface,
                        textAlign = TextAlign.Start
                    )
                }
            }

            Spacer(modifier = Modifier.height(16.dp))

            Row(
                modifier = Modifier.fillMaxWidth(),
                horizontalArrangement = Arrangement.spacedBy(16.dp)
            ) {
                OutlinedButton(
                    onClick = { onNavigateTo(Routes.TELA_PRINCIPAL) },
                    modifier = Modifier.weight(1f),
                    shape = RoundedCornerShape(12.dp),
                    colors = ButtonDefaults.outlinedButtonColors(
                        containerColor = MaterialTheme.colorScheme.surfaceVariant,
                        contentColor = MaterialTheme.colorScheme.onSurfaceVariant
                    )
                ) {
                    Text("Cancelar")
                }

                Button(
                    enabled = isGenerated && !isLoading,
                    onClick = {
                        coroutineScope.launch(Dispatchers.IO) {
                            val trip = tripDao.findById(tripId)
                            if (trip != null) {
                                val updatedTrip = trip.copy(itinerary = itinerary, notes = observations)
                                tripDao.updateTrip(updatedTrip)
                                withContext(Dispatchers.Main) {
                                    Toast.makeText(context, "Roteiro salvo!", Toast.LENGTH_SHORT).show()
                                    onNavigateTo(Routes.TELA_PRINCIPAL)
                                }
                            }
                        }
                    },
                    modifier = Modifier.weight(1f),
                    shape = RoundedCornerShape(12.dp),
                    colors = ButtonDefaults.buttonColors(containerColor = MaterialTheme.colorScheme.primary)
                ) {
                    Text("Salvar")
                }
            }
        }
    }
}
